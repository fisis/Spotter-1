# Template specifications used for documentation
# and validation when loading templates
# Only templates passing validation will be used!

# Parameters that are lists HAVE to have at least
# one comma on the line. If an empty list is needed, 
# use just a comma, for example:
#   shapes = ,
# or
#   pin_pref = 1,

# Values in brackets (min=0, max=2) specify the minimum and maximum for numbers
# and minimum and maximum number of elements for lists. 
# Parameters with defaults are optional.

# NOT IMPLEMENTED:
#   - tracking types
#   - fixed pos/tracking ROI masking
#   - feature tracing

[TEMPLATE]
# General template information
    # Not doing anything right now, but can be useful for documentation
    name = string(min=1)
    date = string
    description = string
    resolution = int_list(min=2, max=2, default=list(640, 480))
    absolute_positions = boolean(default=False)

[FEATURES]
# Features are atomic elements of the image which will be tracked

    [[__many__]]
    # Multiple features can be defined, and higher level objects can be
    # associated with multiple features

        # Feature type defines what tracking algorithm will be used. LEDs are
        # tracked by HSV thresholding. Others are not implemented, but planned.
        type = option('LED', 'SAT', 'MOTION', default='LED')

        # Range of Hue in HSV color space
        range_hue = int_list(min=2, max=2, default=list(0, 60))

        # Range of Saturation in HSV color space
        range_sat = int_list(min=2, max=2, default=list(145, 253))

        # Range of Value in HSV color space
        range_val = int_list(min=2, max=2, default=list(80, 253))

        # Area range a contour found by HSV thresholding has to fit. Noise can
        # be rejected by increasing minimum area for a tradeoff of small LEDs
        # being lost when partially covered. Maximum area can reject finding
        # false picture elements, i.e. table surfaces etc.
        range_area = int_list(min=2, max=2, default=list(20, 0))
        
        # Fixing the position of a feature can allow to search for it in only a
        # tiny fraction of the whole image, speeding tracking up enormously
        fixed_pos = boolean(default=False)
        
        # draw trace of feature position history, good for debugging
        trace = boolean(default=False)
        
        #Kalman filter related values
         R   = float_list(min=2, max=256, default=list(10, 0, 0, 10))
         filter_dimensions= integer(default=6)
         Q  =  float_list(min=2, max=4096, default=list(1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0.001, 0, 0, 0, 0, 0, 0, 0.001, 0, 0, 0, 0, 0, 0, 0.0001, 0, 0, 0, 0, 0, 0, 0.0001))
		 filter_enabled= boolean(default=False)
		 estimation_enabled= boolean(default=False)

[OBJECTS]
    [[__many__]]
        features = string_list
        analog_out = boolean(default=False)
        analog_signal = string_list(default=None)]

        # preferred pins for analog out. If strict, will
        # only use those pins and reject objects that have no preference given.
        # Pin preference can still be made non-strict for specific objects by
        # setting pin_pref for those objects to -1. They will try to grab pins
        # only after all other objects tried to grab theirs.
        pin_pref = int_list(min=0, default=None)
        pin_pref_strict = boolean(default=True)

        # track this object
        track = boolean(default=True)

        # draw a trace of position history
        trace = boolean(default=False)

[SHAPES]
    [[__many__]]
        type = option('rectangle', 'circle', 'line', 'polygon' default='rectangle')
        p1   = float_list(min=2, max=4096, default=list(0, 0))
        p2   = float_list(min=2, max=4096, default=list(150, 150))

[MASKS]
    [[__many__]]
        type = option('rectangle', 'circle', 'line', 'polygon' default='rectangle')
        p1   = float_list(min=2, max=4096, default=list(0, 0))
        p2   = float_list(min=2, max=4096, default=list(150, 150))

[REGIONS]
    [[__many__]]
        shapes            = string_list
        digital_out       = boolean(default=False)
        digital_collision = string_list(min=0)
        pin_pref          = int_list(min=0, default=None)
        pin_pref_strict   = boolean(default=True)
        color             = int_list(min=3, max=3, default=None)

[BLINDSPOTS]
    [[__many__]]
        masks            = string_list

[SERIAL]
    auto = boolean(default=True)
    last_port = string(default='COM3')
    